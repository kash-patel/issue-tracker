CREATE TABLE IF NOT EXISTS locations (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS systems (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  location_id integer NOT NULL,
  name varchar NOT NULL,
  UNIQUE (location_id, name),
  CONSTRAINT location_must_exist FOREIGN KEY (location_id) REFERENCES locations(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS species (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  genus_name varchar NOT NULL,
  species_name varchar NOT NULL,
  UNIQUE (genus_name, species_name)
);

CREATE TABLE IF NOT EXISTS animals (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  species_id integer NOT NULL,
  CONSTRAINT species_must_exist FOREIGN KEY (species_id) REFERENCES species(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS vehicles (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  make varchar NOT NULL,
  model varchar NOT NULL,
  license_plate varchar UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS resources (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS permissions (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS departments (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS roles (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar NOT NULL,
  department_id integer NOT NULL,
  UNIQUE (name, department_id),
  CONSTRAINT department_must_exist FOREIGN KEY (department_id) REFERENCES departments(id)
);

CREATE TABLE IF NOT EXISTS role_resource_permissions (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  role_id integer NOT NULL,
  resource_id integer NOT NULL,
  permission_id integer NOT NULL,
  UNIQUE (role_id, resource_id, permission_code_id),
  CONSTRAINT resource_must_exist FOREIGN KEY (resource_id) REFERENCES resources(id) ON DELETE RESTRICT,
  CONSTRAINT permission_must_exist FOREIGN KEY (permission_id) REFERENCES permissions(id) ON DELETE RESTRICT,
  CONSTRAINT role_must_exist FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS users (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  username varchar UNIQUE NOT NULL,
  password_hashed varchar NOT NULL,
  first_name varchar NOT NULL,
  last_name varchar NOT NULL
);

CREATE TABLE IF NOT EXISTS user_roles (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id integer NOT NULL,
  role_id integer NOT NULL,
  UNIQUE (user_id, role_id),
  CONSTRAINT user_must_exist FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE RESTRICT,
  CONSTRAINT role_must_exist FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS issue_type_codes (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS issue_status_codes (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS issue_priority_codes (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name varchar UNIQUE NOT NULL
);

CREATE TABLE IF NOT EXISTS issues (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  created_at timestamp with time zone NOT NULL,
  closed_at timestamp with time zone,
  summary text NOT NULL,
  description text
);

CREATE TABLE IF NOT EXISTS issue_creators (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  issue_id integer NOT NULL,
  creator_id integer NOT NULL,
  UNIQUE (issue_id, creator_id),
  CONSTRAINT issue_must_exist FOREIGN KEY (issue_id) REFERENCES issues(id) ON DELETE RESTRICT,
  CONSTRAINT creator_must_exist FOREIGN KEY (creator_id) REFERENCES users(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS issue_assignees (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  issue_id integer NOT NULL,
  assignee_id integer NOT NULL,
  UNIQUE (issue_id, assignee_id),
  CONSTRAINT issue_must_exist FOREIGN KEY (issue_id) REFERENCES issues(id) ON DELETE RESTRICT,
  CONSTRAINT assignee_must_exist FOREIGN KEY (assignee_id) REFERENCES users(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS issue_subjects (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  issue_id integer NOT NULL,
  resource_id integer NOT NULL,
  subject_id integer,
  CONSTRAINT issue_must_exist FOREIGN KEY (issue_id) REFERENCES issues(id) ON DELETE RESTRICT,
  CONSTRAINT resource_must_exist FOREIGN KEY (resource_id) REFERENCES resources(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS issue_types (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  issue_id integer NOT NULL,
  type_id integer NOT NULL,
  CONSTRAINT issue_must_exist FOREIGN KEY (issue_id) REFERENCES issues(id) ON DELETE RESTRICT,
  CONSTRAINT type_must_exist FOREIGN KEY (type_id) REFERENCES issue_type_codes(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS issue_statuses (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  issue_id integer NOT NULL,
  status_id integer NOT NULL,
  CONSTRAINT issue_must_exist FOREIGN KEY (issue_id) REFERENCES issues(id) ON DELETE RESTRICT,
  CONSTRAINT status_must_exist FOREIGN KEY (status_id) REFERENCES issue_status_codes(id) ON DELETE RESTRICT
);

CREATE TABLE IF NOT EXISTS issue_priorities (
  id integer GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  issue_id integer NOT NULL,
  priority_id integer NOT NULL,
  CONSTRAINT issue_must_exist FOREIGN KEY (issue_id) REFERENCES issues(id) ON DELETE RESTRICT,
  CONSTRAINT priority_must_exist FOREIGN KEY (priority_id) REFERENCES issue_priority_codes(id) ON DELETE RESTRICT
);